{"version":3,"sources":["MultiFileNameSpaces/Test.ts"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,gDAAgD;AAChD,4CAA4C;AAE5C,sBAAsB;AACtB,IAAI,OAAO,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAEzC,oBAAoB;AACpB,IAAI,UAAU,GAAiD,EAAE,CAAC;AAClE,UAAU,CAAC,UAAU,CAAC,GAAG,IAAI,UAAU,CAAC,gBAAgB,EAAE,CAAC;AAC3D,UAAU,CAAC,cAAc,CAAC,GAAG,IAAI,UAAU,CAAC,oBAAoB,EAAE,CAAC;AAEnE,iDAAiD;AACjD,GAAG,CAAC,CAAU,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;IAAhB,IAAI,CAAC,gBAAA;IACN,GAAG,CAAC,CAAC,IAAI,MAAI,IAAI,UAAU,CAAC,CAAC,CAAC;QAC1B,OAAO,CAAC,GAAG,CAAC,EAAE,EAAA,SAAS,EAAA,GAAG,GAAG,CAAC,UAAU,CAAC,MAAI,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,MAAI,CAAC,CAAC;IAC/G,CAAC;CACJ","file":"MultiFileNameSpaces/Test.js","sourcesContent":["/// <reference path=\"Validation.ts\" />\r\n/// <reference path=\"LettersOnlyValidator.ts\" />\r\n/// <reference path=\"ZipCodeValidator.ts\" />\r\n\r\n// Some samples to try\r\nlet strings = [\"Hello\", \"98052\", \"1013\"];\r\n\r\n// Validators to use\r\nlet validators: { [s: string]: Validation.StringValidator; } = {};\r\nvalidators[\"ZIP code\"] = new Validation.ZipCodeValidator();\r\nvalidators[\"Letters only\"] = new Validation.LettersOnlyValidator();\r\n\r\n// Show whether each string passed each validator\r\nfor (let s of strings) {\r\n    for (let name in validators) {\r\n        console.log(\"\"\" + s + \"\" \" + (validators[name].isAcceptable(s) ? \" matches \" : \" does not match \") + name);\r\n    }\r\n}"],"sourceRoot":"/source/"}