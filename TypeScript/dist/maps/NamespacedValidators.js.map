{"version":3,"sources":["NamespacedValidators.ts"],"names":[],"mappings":";AAAA,IAAU,UAAU,CAmBnB;AAnBD,WAAU,UAAU;IAKhB,IAAM,aAAa,GAAG,aAAa,CAAC;IACpC,IAAM,YAAY,GAAG,UAAU,CAAC;IAEhC;QAAA;QAIA,CAAC;QAHG,2CAAY,GAAZ,UAAa,CAAS;YAClB,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;QACL,2BAAC;IAAD,CAJA,AAIC,IAAA;IAJY,+BAAoB,uBAIhC,CAAA;IAED;QAAA;QAIA,CAAC;QAHG,uCAAY,GAAZ,UAAa,CAAS;YAClB,MAAM,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAClD,CAAC;QACL,uBAAC;IAAD,CAJA,AAIC,IAAA;IAJY,2BAAgB,mBAI5B,CAAA;AACL,CAAC,EAnBS,UAAU,KAAV,UAAU,QAmBnB;AAED,sBAAsB;AACtB,IAAI,OAAO,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAExC,oBAAoB;AACpB,IAAI,UAAU,GAAiD,EAAE,CAAC;AAClE,UAAU,CAAC,UAAU,CAAC,GAAG,IAAI,UAAU,CAAC,gBAAgB,EAAE,CAAC;AAC3D,UAAU,CAAC,cAAc,CAAC,GAAG,IAAI,UAAU,CAAC,oBAAoB,EAAE,CAAC;AAEnE,iDAAiD;AACjD,GAAG,CAAC,CAAU,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;IAAhB,IAAI,CAAC,gBAAA;IACN,GAAG,CAAC,CAAC,IAAI,MAAI,IAAI,UAAU,CAAC,CAAC,CAAC;QAC1B,OAAO,CAAC,GAAG,CAAC,OAAK,CAAC,cAAS,UAAU,CAAC,MAAI,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,gBAAgB,UAAM,MAAO,CAAC,CAAC;IAC7G,CAAC;CACJ","file":"NamespacedValidators.js","sourcesContent":["namespace Validation {\r\n    export interface StringValidator {\r\n        isAcceptable(s: string): boolean;\r\n    }\r\n\r\n    const lettersRegexp = /^[A-Za-z]+$/;\r\n    const numberRegexp = /^[0-9]+$/;\r\n\r\n    export class LettersOnlyValidator implements StringValidator {\r\n        isAcceptable(s: string) {\r\n            return lettersRegexp.test(s);\r\n        }\r\n    }\r\n\r\n    export class ZipCodeValidator implements StringValidator {\r\n        isAcceptable(s: string) {\r\n            return s.length === 5 && numberRegexp.test(s);\r\n        }\r\n    }\r\n}\r\n\r\n// Some samples to try\r\nlet strings = [\"Hello\", \"98052\", \"101\"];\r\n\r\n// Validators to use\r\nlet validators: { [s: string]: Validation.StringValidator; } = {};\r\nvalidators[\"ZIP code\"] = new Validation.ZipCodeValidator();\r\nvalidators[\"Letters only\"] = new Validation.LettersOnlyValidator();\r\n\r\n// Show whether each string passed each validator\r\nfor (let s of strings) {\r\n    for (let name in validators) {\r\n        console.log(`\"${ s }\" - ${ validators[name].isAcceptable(s) ? \"matches\" : \"does not match\" } ${ name }`);\r\n    }\r\n}"],"sourceRoot":"/source/"}