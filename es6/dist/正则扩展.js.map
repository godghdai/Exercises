{"version":3,"sources":["..\\src\\正则扩展.js"],"names":["regex","RegExp","regex2","console","log","test","regex3","flags","exec","s","a1","a2","sticky"],"mappings":";;AAAA;AACI;AACA,QAAIA,QAAQ,IAAIC,MAAJ,CAAW,KAAX,EAAkB,GAAlB,CAAZ,CAFJ,CAEwC;AACpC,QAAIC,SAAS,IAAID,MAAJ,CAAW,MAAX,CAAb,CAHJ,CAGqC;AACjCE,YAAQC,GAAR,CAAYJ,MAAMK,IAAN,CAAW,QAAX,CAAZ,EAAkCH,OAAOG,IAAP,CAAY,QAAZ,CAAlC;AACAF,YAAQC,GAAR,CAAYJ,MAAMK,IAAN,CAAW,QAAX,CAAZ,EAAkCH,OAAOG,IAAP,CAAY,QAAZ,CAAlC;;AAEA,QAAIC,SAAS,IAAIL,MAAJ,CAAW,OAAX,EAAoB,GAApB,CAAb;AACAE,YAAQC,GAAR,CAAYE,OAAOC,KAAnB,EARJ,CAQ+B;AAE9B;;AAED;;AAEA;AACI,QAAIP,SAAQ,IAAIC,MAAJ,CAAW,KAAX,EAAkB,IAAlB,CAAZ;AACAE,YAAQC,GAAR,CAAYJ,OAAMK,IAAN,CAAW,cAAX,CAAZ,EAAwCL,OAAMQ,IAAN,CAAW,cAAX,CAAxC;AACH;;AAED;AACI;AACA,QAAIC,IAAI,eAAR;AACA,QAAIC,KAAK,KAAT;AACA,QAAIC,0BAAJ;;AAEAR,YAAQC,GAAR,CAAYM,GAAGF,IAAH,CAAQC,CAAR,CAAZ,EAAwBE,GAAGH,IAAH,CAAQC,CAAR,CAAxB,EANJ,CAMyC;AACrCN,YAAQC,GAAR,CAAYM,GAAGF,IAAH,CAAQC,CAAR,CAAZ,EAAwBE,GAAGH,IAAH,CAAQC,CAAR,CAAxB,EAPJ,CAOyC;;AAErCN,YAAQC,GAAR,CAAYM,GAAGE,MAAf,EAAuBD,GAAGC,MAA1B,EATJ,CASuC;AACtC;;AAED;AACIT,YAAQC,GAAR,CAAY,MAAZ,EAAmB,UAAUC,IAAV,CAAe,cAAf,CAAnB,EADJ,CACwD;AACpDF,YAAQC,GAAR,CAAY,MAAZ,EAAmB,iCAAWC,IAAX,CAAgB,cAAhB,CAAnB,EAFJ,CAEyD;AACrD;AACAF,YAAQC,GAAR,CAAY,SAASC,IAAT,CAAc,GAAd,CAAZ,EAJJ,CAIqC;AACjCF,YAAQC,GAAR,CAAY,IAAUC,IAAV,CAAe,GAAf,CAAZ,EALJ,CAKsC;AAClCF,YAAQC,GAAR,CAAY,mBAAaC,IAAb,CAAkB,IAAlB,CAAZ,EANJ,CAM0C;AACtC;AACA,QAAII,KAAI,IAAR;AACAN,YAAQC,GAAR,CAAY,oBAAZ,EAAiC,MAAMC,IAAN,CAAWI,EAAX,CAAjC,EATJ,CASqD;AACjDN,YAAQC,GAAR,CAAY,OAAZ,EAAoB,mKAAOC,IAAP,CAAYI,EAAZ,CAApB,EAVJ,CAUyC;;AAErC;AACAN,YAAQC,GAAR,CAAY,IAAZ,EAAiB,OAAOC,IAAP,CAAY,IAAZ,CAAjB,EAbJ,CAayC;AACrCF,YAAQC,GAAR,CAAY,IAAZ,EAAiB,OAAQC,IAAR,CAAa,IAAb,CAAjB,EAdJ,CAc0C;AACtCF,YAAQC,GAAR,CAAY,IAAZ,EAAiB,QAAQC,IAAR,CAAa,MAAb,CAAjB,EAfJ,CAe4C;AACxCF,YAAQC,GAAR,CAAY,IAAZ,EAAiB,sBAASC,IAAT,CAAc,MAAd,CAAjB,EAhBJ,CAgB6C;AAC5C;;AAED;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,YAAQC,GAAR,CAAY,OAAZ,EAAoB,UAAUC,IAAV,CAAe,UAAf,CAApB;AACAF,YAAQC,GAAR,CAAY,OAAZ,EAAoB,YAAYC,IAAZ,CAAiB,UAAjB,CAApB;AACH","file":"正则扩展.js","sourcesContent":["{\n    // #构造函数#\n    let regex = new RegExp('xyz', 'i'); //第一个参数是字符串，第二个是修饰符\n    let regex2 = new RegExp(/xyz/i); //第一个参数是正则表达式，不接受第二个参数，否则会报错\n    console.log(regex.test('xyz123'), regex2.test('xyz123'));\n    console.log(regex.test('xyZ123'), regex2.test('xyZ123'));\n\n    let regex3 = new RegExp(/abc/ig, 'i');\n    console.log(regex3.flags); //原有正则对象的修饰符是ig，它会被第二个参数i覆盖\n\n}\n\n// 字符串对象的4个使用正则表达式的方法： match(),replace(),search(),split()这四个方法全部调用RegExp的实例的方法。\n\n{\n    let regex = new RegExp('xyz', 'ig');\n    console.log(regex.test('xyz0XYZ1xyz2'), regex.exec('xyz0XYZ1xyz2'));\n}\n\n{\n    // y修饰符\n    let s = 'bbbb_bbb_bb_b';\n    var a1 = /b+/g;\n    var a2 = /b+/y;\n\n    console.log(a1.exec(s), a2.exec(s)); // [\"bbbb\"],[\"bbbb\"]\n    console.log(a1.exec(s), a2.exec(s)); // [\"bbb\"],null\n\n    console.log(a1.sticky, a2.sticky); //表示是否开启了粘连模式\n}\n\n{\n    console.log('u修饰符',/^\\uD83D/.test('\\uD83D\\uDC2A')); // true\n    console.log('u修饰符',/^\\uD83D/u.test('\\uD83D\\uDC2A')); // false\n    // 大括号表示Unicode字符，只有加上u才能识别\n    console.log(/\\u{61}/.test('a')); // false\n    console.log(/\\u{61}/u.test('a')); // true\n    console.log(/\\u{20BB7}/u.test('𠮷')); // true\n    // 点（.）字符不能识别码点大于0xFFFF的Unicode字符，必须加上u修饰符。\n    let s = '𠮷';\n    console.log('大于0xFFFF的Unicode字符',/^.$/.test(s)); // false\n    console.log('使用u字符',/^.$/u.test(s)); // true\n\n    // 使用u修饰符后，所有量词都会正确识别大于码点大于0xFFFF的Unicode字符。\n    console.log('量词',/a{2}/.test('aa')); // true\n    console.log('量词',/a{2}/u.test('aa')); // true\n    console.log('量词',/𠮷{2}/.test('𠮷𠮷')); // false\n    console.log('量词',/𠮷{2}/u.test('𠮷𠮷')); // true\n}\n\n{\n    // #正则表达式中，点（.）是一个特殊字符，代表任意的单个字符，但是行终止符（line terminator character）除外\n    // U+000A 换行符（\\n）\n    // U+000D 回车符（\\r）\n    // U+2028 行分隔符（line separator）\n    // U+2029 段分隔符（paragraph separator）\n    // 只是一个提案目前还不支持\n    // let reg=/test.go/s;\n    // console.log(reg.test('test\\ngo'));\n    // console.log(reg.test('test\\ngo'));\n    console.log('s变通方法',/foo.bar/.test('foo\\nbar'));\n    console.log('s变通方法',/foo[^]bar/.test('foo\\nbar'));\n}\n"]}