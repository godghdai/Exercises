{"version":3,"sources":["..\\src\\类和对象.js"],"names":["Parent","name","v_parent","console","log","Child","type","value","v","longName","tell"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACE;AADF,MAEQA,MAFR,GAGI,kBAA4B;AAAA,QAAhBC,IAAgB,uEAAX,UAAW;AAAA;;AAC1B,SAAKA,IAAL,GAAUA,IAAV;AACD,GALL;;AAOE,MAAIC,WAAS,IAAIF,MAAJ,CAAW,GAAX,CAAb;AACAG,UAAQC,GAAR,CAAY,SAAZ,EAAsBF,QAAtB;AACD;;AAED;AACE;AADF,MAEQF,OAFR,GAGI,mBAA4B;AAAA,QAAhBC,IAAgB,uEAAX,UAAW;AAAA;;AAC1B,SAAKA,IAAL,GAAUA,IAAV;AACD,GALL;;AAAA,MAQQI,KARR;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,IAQsBL,OARtB;;AAYEG,UAAQC,GAAR,CAAY,IAAZ,EAAiB,IAAIC,KAAJ,EAAjB;AACD;;AAED;AACE;AADF,MAEQL,QAFR,GAGI,oBAA4B;AAAA,QAAhBC,IAAgB,uEAAX,UAAW;AAAA;;AAC1B,SAAKA,IAAL,GAAUA,IAAV;AACD,GALL;;AAAA,MAQQI,MARR;AAAA;;AASI,sBAAyB;AAAA,UAAbJ,IAAa,uEAAR,OAAQ;AAAA;;AAAA,yIACjBA,IADiB;;AAEvB,aAAKK,IAAL,GAAU,OAAV;AAFuB;AAGxB;;AAZL;AAAA,IAQsBN,QARtB;;AAeEG,UAAQC,GAAR,CAAY,QAAZ,EAAqB,IAAIC,MAAJ,CAAU,OAAV,CAArB;AACD;;AAED;AACE;AADF,MAEQL,QAFR;AAGI,wBAA4B;AAAA,UAAhBC,IAAgB,uEAAX,UAAW;AAAA;;AAC1B,WAAKA,IAAL,GAAUA,IAAV;AACD;;AALL;AAAA;AAAA,0BAOkB;AACZ,eAAO,OAAK,KAAKA,IAAjB;AACD,OATL;AAAA,wBAWiBM,KAXjB,EAWuB;AACjB,aAAKN,IAAL,GAAUM,KAAV;AACD;AAbL;AAAA;AAAA;;AAgBE,MAAIC,IAAE,IAAIR,QAAJ,EAAN;AACAG,UAAQC,GAAR,CAAY,QAAZ,EAAqBI,EAAEC,QAAvB;AACAD,IAAEC,QAAF,GAAW,OAAX;AACAN,UAAQC,GAAR,CAAY,QAAZ,EAAqBI,EAAEC,QAAvB;AACD;;AAED;AACE;AADF,MAEQT,QAFR;AAGI,wBAA4B;AAAA,UAAhBC,IAAgB,uEAAX,UAAW;AAAA;;AAC1B,WAAKA,IAAL,GAAUA,IAAV;AACD;;AALL;AAAA;AAAA,6BAOiB;AACXE,gBAAQC,GAAR,CAAY,MAAZ;AACD;AATL;AAAA;AAAA;;AAYEJ,WAAOU,IAAP;AAED;;AAED;AACE;AADF,MAEQV,QAFR;AAGI,wBAA4B;AAAA,UAAhBC,IAAgB,uEAAX,UAAW;AAAA;;AAC1B,WAAKA,IAAL,GAAUA,IAAV;AACD;;AALL;AAAA;AAAA,6BAOiB;AACXE,gBAAQC,GAAR,CAAY,MAAZ;AACD;AATL;AAAA;AAAA;;AAYEJ,WAAOM,IAAP,GAAY,MAAZ;;AAEAH,UAAQC,GAAR,CAAY,MAAZ,EAAmBJ,SAAOM,IAA1B;AAGD","file":"类和对象.js","sourcesContent":["{\n  // 基本定义和生成实例\n  class Parent{\n    constructor(name='mukewang'){\n      this.name=name;\n    }\n  }\n  let v_parent=new Parent('v');\n  console.log('构造函数和实例',v_parent);\n}\n\n{\n  // 继承\n  class Parent{\n    constructor(name='mukewang'){\n      this.name=name;\n    }\n  }\n\n  class Child extends Parent{\n\n  }\n\n  console.log('继承',new Child());\n}\n\n{\n  // 继承传递参数\n  class Parent{\n    constructor(name='mukewang'){\n      this.name=name;\n    }\n  }\n\n  class Child extends Parent{\n    constructor(name='child'){\n      super(name);\n      this.type='child';\n    }\n  }\n\n  console.log('继承传递参数',new Child('hello'));\n}\n\n{\n  // getter,setter\n  class Parent{\n    constructor(name='mukewang'){\n      this.name=name;\n    }\n\n    get longName(){\n      return 'mk'+this.name\n    }\n\n    set longName(value){\n      this.name=value;\n    }\n  }\n\n  let v=new Parent();\n  console.log('getter',v.longName);\n  v.longName='hello';\n  console.log('setter',v.longName);\n}\n\n{\n  // 静态方法\n  class Parent{\n    constructor(name='mukewang'){\n      this.name=name;\n    }\n\n    static tell(){\n      console.log('tell');\n    }\n  }\n\n  Parent.tell();\n\n}\n\n{\n  // 静态属性\n  class Parent{\n    constructor(name='mukewang'){\n      this.name=name;\n    }\n\n    static tell(){\n      console.log('tell');\n    }\n  }\n\n  Parent.type='test';\n\n  console.log('静态属性',Parent.type);\n\n\n}\n"]}